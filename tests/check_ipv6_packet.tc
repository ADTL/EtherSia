#include "Arduino.h"

#include "IPv6Packet.h"
#suite IPv6Packet

uint8_t rs_buffer[] = {
    0x33, 0x33, 0x00, 0x00, 0x00, 0x02, 0x76, 0x73,
    0x19, 0xba, 0xb8, 0x19, 0x86, 0xdd, 0x60, 0x00,
    0x00, 0x00, 0x00, 0x10, 0x3a, 0xff, 0xfe, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x73,
    0x19, 0xff, 0xfe, 0xba, 0xb8, 0x19, 0xff, 0x02,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x85, 0x00,
    0xee, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,
    0x76, 0x73, 0x19, 0xba, 0xb8, 0x19
};

#test new_packet
IPv6Packet packet;
uint8_t zeroMac[6] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
ck_assert(memcmp(packet.etherSource, zeroMac, 6) == 0);
ck_assert(memcmp(packet.etherDestination, zeroMac, 6) == 0);
ck_assert_int_eq(packet.etherType, htons(ETHER_TYPE_IPV6));
ck_assert_int_eq(packet.ver_tc, 0x60);
ck_assert_int_eq(packet.tc_fl, 0x00);
ck_assert_int_eq(packet.flowLabel, 0);
ck_assert_int_eq(packet.hopLimit, IP6_DEFAULT_HOP_LIMIT);

#test etherType
IPv6Packet *packet = (IPv6Packet *)rs_buffer;
ck_assert_int_eq(packet->etherType, htons(ETHER_TYPE_IPV6));

#test length
IPv6Packet *packet = (IPv6Packet *)rs_buffer;
ck_assert_int_eq(ntohs(packet->length), 16);

#test protocol
IPv6Packet *packet = (IPv6Packet *)rs_buffer;
ck_assert_int_eq(packet->protocol, IP6_PROTO_ICMP6);

#test isValid
IPv6Packet *packet = (IPv6Packet *)rs_buffer;
ck_assert(packet->isValid());

#test isValid_null_packet
uint8_t buffer[128];
memset(buffer, 0, sizeof(buffer));
IPv6Packet *packet = (IPv6Packet *)buffer;
ck_assert(packet->isValid() == false);

#test isValid_wrong_version
uint8_t buffer[128];
memcpy(buffer, rs_buffer, sizeof(rs_buffer));
IPv6Packet *packet = (IPv6Packet *)buffer;
packet->ver_tc = 0x40;
ck_assert(packet->isValid() == false);

#test calculateChecksum
IPv6Packet *packet = (IPv6Packet *)rs_buffer;
// Calculation comes out as 0 because of the checksum field in the ICMP6 header
ck_assert_int_eq(packet->calculateChecksum(), 0x0000);
